import np
import scipy.integrate as integrate
import warnings
from prettytable import PrettyTable
warnings.simplefilter('ignore', np.RankWarning)

print('\n', "Integration with quadrature formulas", '\n')

def trapez(a, b, m):
	h = (b - a) / m
	result = 0.5 * (f(a) + f(b))
	for i in range(1, m):
		result += f(a + i * h)
	return result * h

def leftRect(a, b, m):
	h = (b - a) / m
	result = f(a + 0.5 * h)
	for i in range(1, m):
		result += f(a + i * h)
	return result * h

def rightRect(a, b, m):
	h = (b - a) / m
	result = f(a + 0.5 * h)
	for i in range(1, m):
		result += f(b  + i * h)
	return result * h

def midRect(a, b, m):
	h = (b - a) / m
	result = f(a + 0.5 * h)
	for i in range(1, m):
		result += f(a + 0.5 * h + i * h)
	return result * h

def leftRectSimp(a, b):
    return (b - a) * f(a)

def rightRectSimp(a, b):
    return (b - a) * f(b)

def midRectSimp(a, b):
    return (b - a) * f((a + b) / 2)
"""
print('\n', "Please, enter [a,b]", '\n')
seg = input().split(",")
a = float(seg[0])
b = float(seg[1])
"""
a = 1
b = 3
m = 20
print('\n', "Please, enter w(x)", '\n', "(Please use np prefix: np.exp, np.sin, np.cos and etc)", '\n')
wstr = input()
def w():
    return float(eval(wstr))

print('\n', "Please, enter f(x)", '\n', "(Please use np prefix: np.exp, np.sin, np.cos and etc)", '\n')
fstr = input()
def f(x):
    return float(eval(fstr))

J = integrate.quad(lambda x: eval(fstr), a, b)


print("--------------")
print('\n', "J = ", J[0], '\n')
print("--------------")
print("Left rectangle")
print('\n', "J(h) = ", leftRect(a, b, m), '\n', "|J(h) - J| = ", abs(leftRect(a, b, m) - J[0]), '\n')
print("--------------")
print("Right rectangle")
print('\n', "J(h) = ", rightRect(a, b, m), '\n', "|J(h) - J| = ", abs(rightRect(a, b, m) - J[0]), '\n')
print("--------------")
print("Middle rectangle")
print('\n', "J(h) = ", midRect(a, b, m), '\n', "|J(h) - J| = ", abs(midRect(a, b, m) - J[0]), '\n')
print("--------------")
