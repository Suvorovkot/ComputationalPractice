import np
import scipy.integrate as integrate
import warnings
from prettytable import PrettyTable
warnings.simplefilter('ignore', np.RankWarning)

print('\n', "Integration with quadrature formulas", '\n')
def simpson(a, b, m, h):
    k = 0.0
    x = a + h
    for i in range(1, int(m / 2) + 1):
        k += 4 * f(x)
        x += 2 * h

    x = a + 2 * h
    for i in range(1, int(m / 2)):
        k += 2 * f(x)
        x += 2 * h
    return (h / 3) * (f(a) + f(b) + k)

def trapez(a, b, m, h):
	result = 0.5 * (f(a) + f(b))
	for i in range(1, m):
		result += f(a + i * h)
	return result * h

def leftRect(a, m, h):
	result = f(a + 0.5 * h)
	for i in range(1, m):
		result += f(a + i * h)
	return result * h

def rightRect(a, m, h):
	result = f(a + h)
	for i in range(2, m):
		result += f(a  + i * h)
	return result * h

def midRect(a, m, h):
	result = f(a + 0.5 * h)
	for i in range(1, m):
		result += f(a + 0.5 * h + i * h)
	return result * h


print('\n', "Please, enter [a,b]", '\n')
seg = input().split(",")
a = float(seg[0])
b = float(seg[1])

print('\n', "Please, enter m", '\n')
m = int(input())
h = (b - a) / m

print('\n', "Please, enter f(x)", '\n', "(Please use np prefix: np.exp, np.sin, np.cos and etc)", '\n')
fstr = input()
def f(x):
    return float(eval(fstr))

J = integrate.quad(lambda x: eval(fstr), a, b)

print("--------------")
print('\n', "J = ", J[0], '\n')
print("--------------")
print("Left rectangular formula")
print('\n', "J(h) = ", leftRect(a, m, h), '\n', "|J(h) - J| = ", abs(leftRect(a, m, h) - J[0]), '\n')
print("--------------")
print("Right rectangular formula")
print('\n', "J(h) = ", rightRect(a, m, h), '\n', "|J(h) - J| = ", abs(rightRect(a, m, h) - J[0]), '\n')
print("--------------")
print("Middle rectangular formula")
print('\n', "J(h) = ", midRect(a, m, h), '\n', "|J(h) - J| = ", abs(midRect(a, m, h) - J[0]), '\n')
print("--------------")
print("Trapezoidal formula")
print('\n', "J(h) = ", trapez(a, b, m, h), '\n', "|J(h) - J| = ", abs(trapez(a, b, m, h) - J[0]), '\n')
print("--------------")
print("Simpson's formula")
print('\n', "J(h) = ", simpson(a, b, m, h), '\n', "|J(h) - J| = ", abs(simpson(a, b, m, h) - J[0]), '\n')
print("--------------")
